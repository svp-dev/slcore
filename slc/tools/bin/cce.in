#! @BASH@
# -*- mode: shell-script -*-
# cce: This file is part of the SL toolchain.
#
copyright="Copyright (C) 2009-2016 The SL project."
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 3
# of the License, or (at your option) any later version.
#
# The complete GNU General Public Licence Notice can be found as the
# `COPYING' file in the root directory.
#
PS4='+ cce($$): '
if test -n "$TRACE"; then set -x; fi
set -e

python=${PYTHON:-@python@}

slc_libdir=${SLC_LIBDIR:-@slc_libdir@}
slc_datadir=${SLC_DATADIR:-@slc_datadir@}
slc_incdir=${SLC_INCDIR:-@slc_incdir@}
spp_helper=${SPP:-@spp_helper@}
scu_helper=${SCU:-@scu_helper@}
cm4_helper=${CM4:-@cm4_helper@}
spr_helper=${SPR:-@spr_helper@}

CC_HOST=${CC_HOST_OVERRIDE:-@CC_HOST@}
CXX_HOST=${CXX_HOST_OVERRIDE:-@CXX_HOST@}
AR_HOST=${AR_HOST_OVERRIDE:-@AR_HOST@}
RANLIB_HOST=${RANLIB_HOST_OVERRIDE:-@RANLIB_HOST@}

CC_MTALPHA=${CC_MTALPHA_OVERRIDE:-@CC_MTALPHA@}
AR_MTALPHA=${AR_MTALPHA_OVERRIDE:-@AR_MTALPHA@}
RANLIB_MTALPHA=${RANLIB_MTALPHA_OVERRIDE:-@RANLIB_MTALPHA@}

CC_MTSPARC=${CC_MTSPARC_OVERRIDE:-@CC_MTSPARC@}
AR_MTSPARC=${AR_MTSPARC_OVERRIDE:-@AR_MTSPARC@}
RANLIB_MTSPARC=${RANLIB_MTSPARC_OVERRIDE:-@RANLIB_MTSPARC@}

CC_LEON2MT=${CC_LEON2MT_OVERRIDE:-@CC_LEON2MT@}
AR_LEON2MT=${AR_LEON2MT_OVERRIDE:-@AR_LEON2MT@}
RANLIB_LEON2MT=${RANLIB_LEON2MT_OVERRIDE:-@RANLIB_LEON2MT@}

CC_LEON2=${CC_LEON2_OVERRIDE:-@CC_LEON2MT@}
AR_LEON2=${AR_LEON2_OVERRIDE:-@AR_LEON2MT@}
RANLIB_LEON2=${RANLIB_LEON2_OVERRIDE:-@RANLIB_LEON2MT@}

CC_MIPSEL=${CC_MIPSEL_OVERRIDE:-@CC_MIPSEL@}
AR_MIPSEL=${AR_MIPSEL_OVERRIDE:-@AR_MIPSEL@}
RANLIB_MIPSEL=${RANLIB_MIPSEL_OVERRIDE:-@RANLIB_MIPSEL@}

PTHREAD_CC=${PTHREAD_CC_OVERRIDE:-@PTHREAD_CC@}
PTHREAD_CFLAGS=${PTHREAD_CFLAGS_OVERRIDE:-@PTHREAD_CFLAGS@}
PTHREAD_LIBS=${PTHREAD_LIBS_OVERRIDE:-@PTHREAD_LIBS@}

PTL_LIBDIR=${PTL_LIBDIR_OVERRIDE:-@PTL_LIBDIR@}
PTL_INCLUDEDIR=${PTL_INCLUDEDIR_OVERRIDE:-@PTL_INCLUDEDIR@}

# pre-populated by `slc'
slc_debug_flags=(${slc_debug_flags:+$slc_debug_flags})
extra_f1flags=(${extra_f1flags:+$extra_f1flags})
extra_f2flags=(${extra_f2flags:+$extra_f2flags})
extra_tflags=(${extra_tflags:+$extra_tflags})

version=@slc_version@
bugreports=@bugreports@
basename=${0##*/}

do_usage() {
    cat <<EOF
Configuration Chain Expander.

The \`cce' utility manages configurations for \`slc'. It expands
configuration aliases (short names) into complete strings and provides
shell variables to drive compilation in \`slc'.

Usage: $0 [OPTION] DIALECT-ARCH-OS
   or: $0 [OPTION] ALIAS

Options:
  -s, --set-vars     print shell variables for \`slc'
  -t, --time-stamp   print date of last modification, then exit
  -h, --help         print this help, then exit
  -v, --version      print version number, then exit

Environment variables:
  xx_HOST_OVERRIDE xx_HOST_OVERRIDE
  xx_MTALPHA_OVERRIDE xx_MTSPARC_OVERRIDE
  
  (with 'xx' either CC, AR, CXX, RANLIB)

  PTHREAD_CC_OVERRIDE PTHREAD_CFLAGS_OVERRIDE
  PTHREAD_LIBS_OVERRIDE

Example one-word implementation aliases:

  seqc          sequential C scheduling

  mta           MT-Alpha / Microgrid simulator

  mts           MT-SPARC / FPGA UTLEON3

  hls           hlsim (pthreads-based run-time)

  ptl_n         utc-ptl (pthreads-based run-time)

Example "long" aliases:

  spr-seq_naked-host-host-seqc 
  spr-ptl_naked-host-host-hlsim
  spr-mta_hybrid-mtalpha-sim

Report bugs and patches to $bugreports.
EOF
    exit 0
}

do_version() {
    cat <<EOF
$basename $version

$copyright
This is free software; see the source for copying conditions.  There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

Written by Raphael 'kena' Poss.
EOF
    exit 0
}

do_timestamp() {
    echo "$timestamp"
    exit 0
}

die() {
    echo "$basename:" "$@" >&2
    exit 1
}

# Command line analysis
alias=
set_vars=
describe=
check=
for arg in "$@"; do
    case $arg in
	-v|--version) do_version ;;
	-t|--timestamp) do_timestamp ;;
	-s|--set-vars) set_vars=1 ;;
	-h|--help) do_usage;;
	-*) echo "$basename: unrecognized command-line argument: $arg (try -h)" >&2; exit 1;;
	*) alias=$arg
    esac
done
if test -z "$alias"; then do_usage; fi

# Expand one-word aliases to some arbitrary
# pre-defined configurations
case $alias in
    seqc)         alias=spr-seq_naked-host-host-seqc ;;
    seqc_o)       alias=seqc-seqc_o-host-host-seqc ;;
    seqc_l2mt)    alias=spr-l2mtseq_naked-host-host-l2mtseq ;;

    mtalpha|mta)  alias=spr-mta_hybrid-mtalpha-sim ;;
    mta_n)        alias=spr-mta_naked-mtalpha-sim ;;
    mta_on)       alias=spp-mta_naked-mtalpha-sim ;;
    mta_s)        alias=spr-seq_naked-mtalpha-sim ;;

    mtsparc|mts)  alias=spr-mts_hybrid-mtsparc-fpga ;;
    mts_n)        alias=spr-mts_naked-mtsparc-fpga ;;
    mts_s)        alias=spr-seq_naked-mtsparc-fpga ;;

    mtsparc|mtsn) alias=spr-mtsn_hybrid-mtsparc-sim ;;
    mtsn_n)       alias=spr-mtsn_naked-mtsparc-sim ;;
    mtsn_s)       alias=spr-seq_naked-mtsparc-sim ;;

    leon2_s)      alias=spr-l2mtseq_naked-leon2-tbdef ;;
    leon2mt|l2mt) alias=spr-l2mt_hybrid-leon2mt-tbdef ;;
    l2mt_n)       alias=spr-l2mt_naked-leon2mt-tbdef ;;
    l2mt_s)       alias=spr-l2mtseq_naked-leon2mt-tbdef ;;

    leon2_sf)         alias=spr-l2mtseq_naked-leon2-fpga ;;
    leon2mt_f|l2mt_f) alias=spr-l2mt_hybrid-leon2mt-fpga ;;
    l2mt_nf)          alias=spr-l2mt_naked-leon2mt-fpga ;;
    l2mt_sf)          alias=spr-l2mtseq_naked-leon2mt-fpga ;;

    mipsel_s)     alias=spr-seq_naked-mipsel-sim ;;

    hrt)          alias=spr-hrt_hybrid-host-host-hrt ;;
    hrt_n)        alias=spr-hrt_naked-host-host-hrt ;;
    hrt_s)        alias=spr-seq_naked-host-host-hrt ;;

    ptl_n)        alias=spr-ptl_naked-host-host-ptl ;;
    ptl_s)        alias=spr-seq_naked-host-host-ptl ;;
    ptld_n)       alias=spr-ptl_naked-host-host-ptld ;;
    ptld_s)       alias=spr-seq_naked-host-host-ptld ;;

    hls)          alias=spr-ptl_hybrid-host-host-hlsim ;;
    hls_n)        alias=spr-ptl_naked-host-host-hlsim ;;
    hls_s)        alias=spr-seq_naked-host-host-hlsim ;;
    hlsd)         alias=spr-ptl_hybrid-host-host-hlsimd ;;
    hlsd_n)       alias=spr-ptl_naked-host-host-hlsimd ;;
    hlsd_s)       alias=spr-seq_naked-host-host-hlsimd ;;
    
    utc0)  alias=utc0-mta_naked-mtalpha-sim ;;
    utcx)  alias=utc--x-x ;;
    *-*)   ;; # more than one word: pass to next stage
    *)     # remaining single-word aliases
	die "$alias: unknown alias" ;;
esac

# Other cases
case $alias in
    *-*-*-*)
     # 4 or more parts, use them
	IFS='-' read slc_dialect slc_variant slc_arch slc_os <<EOF
$alias
EOF
	;;
    *)
     # Any other form, unrecognized for now
	die "$alias: unknown alias" ;;
esac

slc_tag=$slc_dialect-$slc_variant-$slc_arch-$slc_os

if test "x$set_vars" = x; then
    echo $slc_tag
    exit 0
fi

archvar=$(tr abcdefghijklmnopqrstuvwxyz ABCDEFGHIJKLMNOPQRSTUVWXYZ <<<"$slc_arch")
basearch=${slc_arch:2}
basearchvar=$(tr abcdefghijklmnopqrstuvwxyz ABCDEFGHIJKLMNOPQRSTUVWXYZ <<<"$basearch")

# Language mode selection
slc_complang=unknown
case $slc_dialect-$slc_os in
    *-host-ptl*)        slc_complang=cpp;;
    spr-*|seqc-*|spp-*) slc_complang=c;;
    utc*)               slc_complang=utc;;
    *) echo "unknown dialect: $slc_dialect" >&2;;
esac

# Transformation selection
case $slc_dialect in
    spp|utc*|seqc*|ptl*) 
        slc_translator=("$cm4_helper" -fcm4-lquote='[[' -fcm4-rquote=']]')
        slc_tflags+=(-X "-DPYTHON=$python" -X "-DSPP_PY=$spp_helper") 
        ;;
    spr)
        target=unknown
        case $slc_variant in
            seq_naked)   target=seq ;;
            ptl_naked)   target=ptl ;;			            
            ptl_hybrid)  target=ptl+seq ;;			                        
            mta_naked)   target=mta ;;
            mta_hybrid)  target=mta+seq ;;
            mts_naked)   target=mts ;;
            mts_hybrid)  target=mts+seq ;;
            mtsn_naked)  target=mtsn ;;
            mtsn_hybrid) target=mtsn+seq ;;
            l2mtseq_naked)   target=l2mtseq ;;
            l2mt_naked)  target=l2mt ;;
            l2mt_hybrid) target=l2mt+seq ;;
            hrt_naked)   target=hrt ;;
            hrt_hybrid)  target=hrt+seq ;;
            *) echo "unknown variant: $slc_dialect-$slc_variant" >&2 ;;
        esac
        slc_translator=("$python" "$spr_helper" -b "$target")
        ;;
esac

slc_transbase=unknown
case $slc_dialect in
    spr|utc*|seqc*|ptl*) slc_transbase=$slc_dialect ;;
    spp) slc_transbase=$slc_dialect$basearch ;;
esac

save_IFS=$IFS
IFS=:
found=
for d in $slc_datadir; do
  if test -d "$d/t-$slc_transbase"; then
    found="$d/t-$slc_transbase"
    break
  fi
done
if test -z "$found"; then
   echo "$basename: warning: could not find t-$slc_transbase in $slc_datadir" >&2
else
    slc_trans=$found
    slc_tflags+=("-I$slc_trans")
    slc_pp_prefix+=(-include "$slc_trans/include/sl_support.h")
fi

for m4_preinc in slc_m4sugar.m4 slc.m4; do
   found=
   for d in $slc_incdir; do
     if test -r "$d/$m4_preinc"; then
       found="$d/$m4_preinc"
       break
     fi
   done
   if test -z "$found"; then
      echo "$basename: warning: could not find $m4_preinc in $slc_incdir" >&2
   else
      slc_tflags+=("-X" "$found")
   fi
done
for d in $slc_incdir; do
  slc_tflags+=("-I$d")
  slc_ppflags+=("-I$d")
done
IFS=$save_IFS

# ptl variant selection
case $slc_os in
    host-ptl)    ptl_variant=ptln-opt; ptl_core=utc-ptl; ptl_libname=libptl ;;
    host-ptld)   ptl_variant=ptln-dbg; ptl_core=utc-ptl; ptl_libname=libptl ;;
    host-hlsim)  ptl_variant=ptl-opt;  ptl_core=hlsim-ptl; ptl_libname=libhlsim ;;
    host-hlsimd) ptl_variant=ptl-dbg;  ptl_core=hlsim-ptl; ptl_libname=libhlsim ;;
esac

# Compiler flags selection; default to optimize
# must occur before compiler selection below, so that ptl
# overrides can change the optimization level.
case $slc_dialect-$slc_arch in
    spr-mt*|spr-mips*)
	slc_cflags+=(-O2) ;;
    spr-leon2*)
	slc_cflags+=(-Os) ;;
    spr-host)
        slc_cflags+=(-O2) ;;
    spp-*)
	slc_cflags+=(-O2 -DMT_FORCE_TEMP_FOR_SHARED_WRITE=1) ;;
    utc0-*)
	slc_cflags+=(-O1) ;;
    *) ;;
esac

# Compiler selection
case $slc_dialect-$slc_arch in
    utc-x) slc_compiler=($CC_HOST -E) ;;
    *-x) slc_compiler=("$scu_helper" compile) ;;
    *-host)
	case $slc_complang-$slc_os in
            c-*hrt)   slc_compiler=($PTHREAD_CC $PTHREAD_CFLAGS) ;;
            *host-ptl*|*host-hlsim*)
                 slc_compiler=($(cat "$PTL_LIBDIR/$ptl_variant/$ptl_core/$ptl_libname.cxxcmd") -D_GLIBCXX_USE_C99_MATH=1)
                 slc_cflags+=($(cat "$PTL_LIBDIR/$ptl_variant/$ptl_core/$ptl_libname.cxxflags"))
                 slc_ppflags+=($(cat "$PTL_LIBDIR/$ptl_variant/$ptl_core/$ptl_libname.cppflags") -I$PTL_INCLUDEDIR/$ptl_variant/$ptl_core)
                 ;; 
	    c-*)      slc_compiler=($CC_HOST) ;;
	    *) echo "$basename: warning: no compiler for $dialect-$arch" >&2 ;;
	esac
	slc_filter1=(cp)
	slc_filter2=(cp)
	;;
    spr-leon2)
	slc_compiler=($(eval "echo \${CC_$archvar:-$scu_helper} -std=gnu99"))
	slc_filter1=(cp)
	slc_filter2=(cp)
	;;
    spr-mips*)
	slc_compiler=($(eval "echo \${CC_$archvar:-$scu_helper} -std=gnu99"))
	slc_filter1=(cp)
	slc_filter2=("$python" "$spp_helper" "$slc_arch" "$slc_transbase" filter2)
        ;;
    spr-*|spp-*)
        archcomp=$(eval "echo \${CC_$archvar:-\"\$scu_helper\"} -std=gnu99")
	slc_compiler=("$python" "$spp_helper" "$slc_arch" "$slc_transbase" compile $archcomp)
        slc_filter1=("$python" "$spp_helper" "$slc_arch" "$slc_transbase" filter)
	slc_filter2=("$python" "$spp_helper" "$slc_arch" "$slc_transbase" filter2)
	;;
    *-*)
	case $slc_complang in
	    cpp) slc_compiler=($(eval "echo \${CXX_$archvar:-$scu_helper}")) ;;
	    c)   slc_compiler=($(eval "echo \${CC_$archvar:-$scu_helper} -std=gnu99")) ;;
	    utc) slc_compiler=($(eval "echo \${CC_$archvar:-$scu_helper} -std=utc")) ;;
	esac
	slc_filter1=(cp)
	slc_filter2=("$python" "$spp_helper" "$slc_transbase" filter2)
	;;

esac

# Disable debugging for the MT targets
case $slc_arch in
    mt*|leon2*)
	if test "x$slc_debug_flags" != "x"; then
	    echo "$basename: warning: flags unsupported by $slc_arch-$slc_os: ${slc_debug_flags[*]}" >&2
	fi
	slc_debug_flags=()
        ;;
esac

# Assembler and linker selection
case $slc_complang-$slc_arch in
    *-x)      slc_aslink=("$scu_helper" assemble/link);;
    *-host)
	case $slc_complang-$slc_os in
            c-*hrt)      slc_aslink=($PTHREAD_CC $PTHREAD_CFLAGS $PTHREAD_LIBS) ;;
	    *host-ptl*|*host-hlsim*) slc_aslink=($(cat "$PTL_LIBDIR/$ptl_variant/$ptl_core/$ptl_libname.cxxcmd")) ;;
	    c-*)         slc_aslink=($CC_HOST) ;;
	    *) echo "$basename: warning: no as/ld for $dialect-$arch" >&2 ;;
	esac
	;;
    cpp-*)    slc_aslink=($(eval "echo \${CXX_$archvar:-\"\$scu_helper\"}")) ;;
    *-*)      slc_aslink=($(eval "echo \${CC_$archvar:-\"\$scu_helper\"}")) ;;
esac

# Ar and ranlib selection
case $slc_arch in
    *)
	slc_ar=$(eval "echo \${AR_$archvar:-\"$scu_helper\" archive}")
	slc_ranlib=$(eval "echo \${RANLIB_$archvar:-\"$scu_helper\" ranlib}")
	;;
esac


# Propagate selection to programs/libraries
version_major=${version%%.*}
version_rest=${version#*.}
version_minor=${version_rest%%[b.]*}
slc_ppflags+=( \
    -D__slc_version_string__=\"$version\" \
    -D__slc_version_major__=$version_major \
    -D__slc_version_minor__=$version_minor \
    -D__slc_dialect_${slc_dialect//[^a-zA-Z0-9]/_}__ \
    -D__slc_variant_${slc_variant//[^a-zA-Z0-9]/_}__ \
    -D__slc_arch_${slc_arch//[^a-zA-Z0-9]/_}__ \
    -D__slc_os_${slc_os//[^a-zA-Z0-9]/_}__ )

# Extra flag selection
case $slc_arch-$slc_os in
    host-host-hlsim* | mt*-sim) 
        slc_ppflags+=(-D__slc_multiple_places__) ;;
esac
case $slc_arch-$slc_os in
    host-host-ptl* | host-host-hlsim*) 
        slc_ppflags+=(-D__slc_os_init_via_main__)
        ;;
esac

# Default underlying compiler
case $slc_arch in
    mips*)
        # NB: fno-expensive-optimizations seems to be mandatory in gcc 4.7 to ensure delay slots are not filled
        slc_cflags+=(-march=mips1 -fno-delayed-branch -mno-shared -mno-explicit-relocs -fno-math-errno -fno-trapping-math --param max-delay-slot-insn-search=0 --param max-delay-slot-live-search=0 -fno-expensive-optimizations -mno-check-zero-division)
        ;;
    mtalpha)
        slc_cflags+=(-mcpu=21264a -fno-math-errno -fno-trapping-math)
        ;;
    mtsparc)
        slc_ppflags+=(-D__slc_short_double__)
        slc_cflags+=(-mcpu=v8 -fno-math-errno -fno-trapping-math -fshort-double -fno-delayed-branch -falign-functions=64)
        ;;
    leon2*)
        slc_ppflags+=(-D__slc_short_double__ -Dsl_glfparm=sl_glparm -Dsl_glfarg=sl_glarg)
        extra_tflags+=(-x no-create-strategies)
        slc_cflags+=(-mcpu=leon -fno-math-errno -fno-trapping-math -fshort-double -mflat -fomit-frame-pointer -fgcse-sm -fgcse-las -fgcse-after-reload -flive-range-shrinkage -msoft-float)
	case $slc_arch in
	    leon2mt)
		slc_cflags+=(-falign-functions=128 -masync-y) # -malways-lib-div
		;;
	esac
        ;;
    *)
	;;
esac

slc_ppflags+=(-DUSE_C_DIVIDE)

case $slc_arch in
    mtalpha)
        slc_ppflags+=(-D__mt_freestanding__ -D__WORDSIZE=64)
	;;
    mtsparc|mips*|leon2*)
        slc_ppflags+=(-D__mt_freestanding__ -D__WORDSIZE=32)
	;;
esac
case $slc_arch-$slc_os in
    *-sim)
	slc_ldflags+=(-nostdlib)
	case $slc_arch in
	    mips*) ;;
	    *)
		slc_ldflags+=(-Wl,-Ttext -Wl,0x1000)
		;;
	esac
        case $slc_arch in
            mtsparc|mips*)
                # with 32-bit, place the heap far above the code, but below I/O.
                slc_ldflags+=(-Wl,--section-start -Wl,MGOS_HEAPBASE=0x40000000)
                ;;
            mtalpha)
                # with 64-bit the heap can collide with the I/O region. move it above.
                slc_ldflags+=(-Wl,--section-start -Wl,MGOS_HEAPBASE=0x100000000)
                ;;
        esac
	;;
    *-fpga|*-tbdef)
		case $slc_arch in
			mtsparc)
				# UT-LEON3 has this restriction.
				extra_f2flags+=(-x flush-before-delayed)
		esac
		# LEON2-MT and UT-LEON3 address TLS via "gettid".
		# UT-LEON3 and (perhaps?) LEON2-MT don't clear their local registers.
		extra_f1flags+=(-x tls-via-gettid -x clear-local-regs)
		# The hardware platforms are single cores and don't support alloc/
		# create strategies yet.
        extra_tflags+=(-x no-create-strategies)
		# Hardware uses a special layout, can't rely on ELF sections.
		slc_ldflags+=(-nostdlib -Wl,-dT -Wl,linkram)
		;;
    host-host-hrt)
        slc_ldflags+=($PTHREAD_LIBS -static)
        ;;
esac


# OS selection
case $slc_os in
    x) ;;
    *)
        save_IFS=$IFS
        IFS=:
        if test "$slc_nostdinc" != "yes"; then
            for d in $slc_datadir; do
                slc_ppflags+=("-I$d/$slc_arch-$slc_os/include")
            done
        fi
	if test "$slc_use_slrt" != "no"; then
            found=
            for d in $slc_libdir; do
  		osdir=$d/$slc_arch-$slc_os
                if test -r "$osdir/slrt.o"; then
                    found=$osdir/slrt.o
		    break
		fi
            done
	    if test -z "$found"; then
		echo "$basename: warning: slrt.o not found for $slc_variant-$slc_arch-$slc_os in $slc_libdir" >&2
            else
		slc_ldflags+=("$found")
	    fi
        fi

        have_libmgos_a=
        have_libm_a=
        have_libc_a=
        have_libgcc_a=
	for d in $slc_libdir; do
            ldir=$d/$slc_arch-$slc_os
            if test -r $ldir; then
	        slc_ldflags+=("-L$ldir")
                if test -r $ldir/libmgos.a; then have_libmgos_a=yes; fi
                if test -r $ldir/libm.a; then have_libm_a=yes; fi
                if test -r $ldir/libc.a; then have_libc_a=yes; fi
                if test -r $ldir/libgcc.a; then have_libgcc_a=yes; fi
            fi

            ldir=$d/$slc_arch-$slc_os/$slc_variant
            if test -r $ldir; then
	        slc_ldflags+=("-L$ldir")
            fi
        done
        if test "$slc_use_mgos" != "no" -a "$have_libmgos_a" = yes;  then slc_ldflags+=("-lmgos"); fi
        if test "$slc_use_cstdlib" != "no" -a "$have_libc_a" = yes;  then slc_ldflags+=("-lc"); fi
        if test "$slc_use_mgos" != "no" -a "$have_libmgos_a" = yes;  then slc_ldflags+=("-lmgos"); fi
        if test "$slc_use_cstdlib" != "no" -a "$have_libm_a" = yes;  then slc_ldflags+=("-lm"); fi
	if test "$slc_use_libsl" != "no"; then slc_ldflags+=("-lsl"); fi
        if test "$slc_use_slrt" != "no"; then slc_ldflags+=("-lslc"); fi
        if test "$slc_use_main" != "no"; then slc_ldflags+=("-lslmain"); fi
        if test "$slc_use_cstdlib" != "no" -a "$have_libgcc_a" = yes;  then slc_ldflags+=("-lgcc"); fi

        IFS=$save_IFS
	;;
esac

case $slc_os in
   *host-hlsim*|*host-ptl*)
      slc_ldflags+=($(cat "$PTL_LIBDIR/$ptl_variant/$ptl_core/$ptl_libname.ldflags"))
      ;;
esac
case $slc_os in
    *host-hlsim*) slc_ldflags+=(-L$PTL_LIBDIR/$ptl_variant/$ptl_core -lhlsim -lptl) ;;
    *host-ptl*)   slc_ldflags+=(-L$PTL_LIBDIR/$ptl_variant/$ptl_core -lptl) ;;
esac

set | grep '^slc_'
set | grep '^extra_'




